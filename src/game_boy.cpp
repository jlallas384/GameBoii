#include "game_boy.h"
#include <vector>
#include <cstdint>
#include <fstream>
#include <exception>
#include "cartridge.h"

unsigned char DMG_ROM_bin[] = {
  0x31, 0xfe, 0xff, 0x21, 0xff, 0x9f, 0xaf, 0x32, 0xcb, 0x7c, 0x20, 0xfa,
  0x0e, 0x11, 0x21, 0x26, 0xff, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3,
  0x32, 0xe2, 0x0c, 0x3e, 0x77, 0x32, 0xe2, 0x11, 0x04, 0x01, 0x21, 0x10,
  0x80, 0x1a, 0xcd, 0xb8, 0x00, 0x1a, 0xcb, 0x37, 0xcd, 0xb8, 0x00, 0x13,
  0x7b, 0xfe, 0x34, 0x20, 0xf0, 0x11, 0xcc, 0x00, 0x06, 0x08, 0x1a, 0x13,
  0x22, 0x23, 0x05, 0x20, 0xf9, 0x21, 0x04, 0x99, 0x01, 0x0c, 0x01, 0xcd,
  0xb1, 0x00, 0x3e, 0x19, 0x77, 0x21, 0x24, 0x99, 0x0e, 0x0c, 0xcd, 0xb1,
  0x00, 0x3e, 0x91, 0xe0, 0x40, 0x06, 0x10, 0x11, 0xd4, 0x00, 0x78, 0xe0,
  0x43, 0x05, 0x7b, 0xfe, 0xd8, 0x28, 0x04, 0x1a, 0xe0, 0x47, 0x13, 0x0e,
  0x1c, 0xcd, 0xa7, 0x00, 0xaf, 0x90, 0xe0, 0x43, 0x05, 0x0e, 0x1c, 0xcd,
  0xa7, 0x00, 0xaf, 0xb0, 0x20, 0xe0, 0xe0, 0x43, 0x3e, 0x83, 0xcd, 0x9f,
  0x00, 0x0e, 0x27, 0xcd, 0xa7, 0x00, 0x3e, 0xc1, 0xcd, 0x9f, 0x00, 0x11,
  0x8a, 0x01, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x1b, 0x7a, 0xb3, 0x20,
  0xf5, 0x18, 0x49, 0x0e, 0x13, 0xe2, 0x0c, 0x3e, 0x87, 0xe2, 0xc9, 0xf0,
  0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20, 0xf7, 0xc9, 0x78, 0x22, 0x04,
  0x0d, 0x20, 0xfa, 0xc9, 0x47, 0x0e, 0x04, 0xaf, 0xc5, 0xcb, 0x10, 0x17,
  0xc1, 0xcb, 0x10, 0x17, 0x0d, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9,
  0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c, 0x00, 0x54, 0xa8, 0xfc,
  0x42, 0x4f, 0x4f, 0x54, 0x49, 0x58, 0x2e, 0x44, 0x4d, 0x47, 0x20, 0x76,
  0x31, 0x2e, 0x32, 0x00, 0x3e, 0xff, 0xc6, 0x01, 0x0b, 0x1e, 0xd8, 0x21,
  0x4d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3e, 0x01, 0xe0, 0x50
};

unsigned int DMG_ROM_bin_len = 256;

GameBoy::GameBoy(std::unique_ptr<LCD> lcd) : cpu(addrBus), irqHandler(cpu, addrBus), ppu(addrBus, std::move(lcd), irqHandler), timers(addrBus, irqHandler) {
    addrBus.setReader(0xff00, [&]() {
        return !getBit(joypadRegister, 5) ? joypadRegister | buttonsState : joypadRegister | dPadState;
    });
    addrBus.setWriter(0xff00, [&](uint8_t byte) {
        joypadRegister = byte & 0xf0;
    });
    for (int i = 0xff10; i <= 0xff26; i++) {
        addrBus.setReader(i, [&]() {
            return 0;
        });
        addrBus.setWriter(i, [&](uint8_t byte) {

        });
    }
    for (int i = 0xff30; i <= 0xff3f; i++) {
        addrBus.setReader(i, [&]() {
            return 0;
        });
        addrBus.setWriter(i, [&](uint8_t byte) {

        });
    }
    uint8_t* x = new uint8_t(100);
    addrBus.setReader(0xff01, *x);
    addrBus.setWriter(0xff01, *x);
    addrBus.setReader(0xff02, *x);
    addrBus.setWriter(0xff02, [x](uint8_t byte) {

    });

    addrBus.setWriter(0xff50, [&](uint8_t byte) {
        if (byte) {
            cartridge->loadToAddrBus(addrBus);
        }
    });
    for (int i = 0; i < hram.size(); i++) {
        addrBus.setReader(0xff80 + i, hram[i]);
        addrBus.setWriter(0xff80 + i, hram[i]);
    }
    for (int i = 0; i < wram.size(); i++) {
        addrBus.setReader(0xc000 + i, wram[i]);
        addrBus.setWriter(0xc000 + i, wram[i]);
    }
}

uint32_t getRAMSize(uint8_t value) {
    switch (value) {
        case 0x0:
        case 0x1:
            return 0;
        case 0x2:
            return 8192;
        case 0x3:
            return 32768;
        case 0x4:
            return 131072;
        case 0x5:
            return 65536;
        default:
            return 0;
            // todo error;
    }
}

std::unique_ptr<Cartridge> createCartidge(uint8_t value, std::vector<uint8_t>& rom, uint32_t ramSize) {
    return Cartridge::create(MapperKind::kNone, rom, ramSize);
    switch (value) {
        case 0x0:
            return Cartridge::create(MapperKind::kNone, rom, ramSize);
            break;
        case 0x1:
        case 0x2:
        case 0x3:
            return Cartridge::create(MapperKind::kMBC1, rom, ramSize);
            break;
        case 0x4:
        case 0x5:
            return Cartridge::create(MapperKind::kMBC2, rom, ramSize);
            break;
        case 0x11:
        case 0x12:
        case 0x13:
            return Cartridge::create(MapperKind::kNone, rom, ramSize);
            break;
        default:
            throw std::runtime_error("mapper is not supported");
    }
}

void GameBoy::loadCartridge(std::filesystem::path path) {
    std::ifstream file(path, std::ios::binary);
    file.seekg(0x148);
    auto value = file.peek(); // TODO error check
    uint32_t romSize = 32768 * (1 << value);
    std::vector<uint8_t> rom(romSize);
    file.seekg(0);
    file.read(reinterpret_cast<char*>(rom.data()), romSize);
    uint32_t ramSize = getRAMSize(rom[0x149]);
    cartridge = createCartidge(rom[0x147], rom, ramSize);
    cartridge->loadRAM(path.replace_extension("sav"));
    cartridge->loadToAddrBus(addrBus);
    for (int i = 0; i < DMG_ROM_bin_len; i++) {
        addrBus.setReader(i, DMG_ROM_bin[i]);
    }
}

void GameBoy::run() {
    cpu.tick();
    ppu.tick();
    ppu.tick();
    ppu.tick();
    ppu.tick();
    timers.tick();
    timers.tick();
    timers.tick();
    timers.tick();
    irqHandler.handle();
}

void GameBoy::changeButtonState(Button button, bool on) {
    if (!getBit(joypadRegister, 5) && getBit(buttonsState, button) && on) {
        irqHandler.request(IRQHandler::KJoypad);
    }
    buttonsState = setBit(buttonsState, button, !on);
}

void GameBoy::changeDPadState(Button button, bool on) {
    if (!getBit(joypadRegister, 4) && getBit(dPadState, button) && on) {
        irqHandler.request(IRQHandler::KJoypad);
    }
    dPadState = setBit(dPadState, button, !on);
}

